// T·∫°o k·∫øt n·ªëi socket.io t·ªõi signaling server
const socket = io();

// ƒê·ªëi t∆∞·ª£ng l∆∞u danh s√°ch c√°c k·∫øt n·ªëi peer v·ªõi m·ªói viewer, key l√† socket ID
const peerConnections = {};

// C·∫•u h√¨nh ICE server (s·ª≠ d·ª•ng STUN server c·ªßa Google ƒë·ªÉ h·ªó tr·ª£ NAT traversal)
const config = {
  iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]
};

// L·∫•y ph·∫ßn t·ª≠ video trong HTML ƒë·ªÉ hi·ªÉn th·ªã video local (ph√≠a drone)
const localVideo = document.getElementById('localVideo');
// Khi trang web load xong, b·∫Øt ƒë·∫ßu streaming
window.onload = async () => {
  console.log('üì∑ Auto-start streaming on page load');

  try {
    // Y√™u c·∫ßu quy·ªÅn truy c·∫≠p camera (ch·ªâ video, kh√¥ng l·∫•y audio)
    const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: false });
    console.log('‚úÖ Camera stream acquired');

    // G√°n lu·ªìng camera v√†o th·∫ª video local ƒë·ªÉ hi·ªÉn th·ªã h√¨nh ·∫£nh t·∫°i giao di·ªán broadcaster
    localVideo.srcObject = stream;

    // G·ª≠i th√¥ng b√°o t·ªõi signaling server r·∫±ng m√¨nh l√† broadcaster
    socket.emit('broadcaster');
    // Khi nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu t·ª´ m·ªôt viewer (watcher)
    socket.on('watcher', async id => {
      console.log('üì° Watcher connected:', id);

      // T·∫°o k·∫øt n·ªëi WebRTC m·ªõi cho viewer n√†y
      const pc = new RTCPeerConnection(config);
      peerConnections[id] = pc;

      // Th√™m t·∫•t c·∫£ track (video) t·ª´ lu·ªìng local v√†o peer connection
      stream.getTracks().forEach(track => {
        pc.addTrack(track, stream);
      });
      console.log('üéôÔ∏è Tracks added to peer connection:', pc.getSenders());
      // Khi ICE candidate ƒë∆∞·ª£c t·∫°o (th√¥ng tin m·∫°ng), g·ª≠i ƒë·∫øn viewer th√¥ng qua signaling server
      pc.onicecandidate = event => {
        if (event.candidate) {
          socket.emit('candidate', id, event.candidate);
        }
      };
      // T·∫°o offer SDP t·ª´ ph√≠a broadcaster
      const offer = await pc.createOffer();
      await pc.setLocalDescription(offer);

      // ƒê·ª£i cho qu√° tr√¨nh ICE gathering ho√†n t·∫•t tr∆∞·ªõc khi g·ª≠i offer
      await new Promise(resolve => {
        if (pc.iceGatheringState === 'complete') {
          resolve();
        } else {
          const checkState = () => {
            if (pc.iceGatheringState === 'complete') {
              pc.removeEventListener('icegatheringstatechange', checkState);
              resolve();
            }
          };
          pc.addEventListener('icegatheringstatechange', checkState);
        }
      });

      // G·ª≠i offer t·ªõi viewer th√¥ng qua signaling server
      socket.emit('offer', id, pc.localDescription);
    });
    // Khi nh·∫≠n ƒë∆∞·ª£c answer t·ª´ viewer, ƒë·∫∑t remote description v√†o peer connection
    socket.on('answer', (id, description) => {
      console.log('üì® Received answer from', id);
      peerConnections[id]?.setRemoteDescription(description);
    });
    // Khi nh·∫≠n ICE candidate t·ª´ viewer, th√™m v√†o peer connection t∆∞∆°ng ·ª©ng
    socket.on('candidate', (id, candidate) => {
      console.log('üì® Received ICE candidate from', id);
      peerConnections[id]?.addIceCandidate(new RTCIceCandidate(candidate));
    });
    // Khi viewer ng·∫Øt k·∫øt n·ªëi, ƒë√≥ng k·∫øt n·ªëi peer t∆∞∆°ng ·ª©ng v√† x√≥a kh·ªèi danh s√°ch
    socket.on('disconnectPeer', id => {
      console.log('‚ùå Viewer disconnected:', id);
      peerConnections[id]?.close();
      delete peerConnections[id];
    });
  } catch (err) {
    // N·∫øu x·∫£y ra l·ªói khi l·∫•y camera, hi·ªÉn th·ªã l·ªói ra console v√† b√°o cho ng∆∞·ªùi d√πng
    console.error('‚ùå getUserMedia error:', err);
    alert('L·ªói khi truy c·∫≠p camera: ' + err.name + ' ‚Äì ' + err.message);
  }
};
