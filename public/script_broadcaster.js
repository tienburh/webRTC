// K·∫øt n·ªëi socket.io client v·ªõi signaling server
const socket = io();

// L∆∞u peer connections v·ªõi t·ª´ng viewer
const peerConnections = {};

// C·∫•u h√¨nh STUN server
const config = {
  iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]
};

// Tham chi·∫øu ph·∫ßn t·ª≠ video hi·ªÉn th·ªã camera local
const localVideo = document.getElementById('localVideo');

// Khi trang ƒë∆∞·ª£c t·∫£i xong, t·ª± ƒë·ªông b·∫Øt ƒë·∫ßu stream
window.onload = async () => {
  console.log('üì∑ Auto-start streaming on page load');

  try {
    // Y√™u c·∫ßu quy·ªÅn truy c·∫≠p camera + micro
    const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: false });
    console.log('‚úÖ Camera stream acquired');
    localVideo.srcObject = stream;

    // ƒêƒÉng k√Ω l√† broadcaster v·ªõi signaling server
    socket.emit('broadcaster');

    // Khi c√≥ viewer m·ªõi k·∫øt n·ªëi
    socket.on('watcher', async id => {
      console.log('üì° Watcher connected:', id);

      const pc = new RTCPeerConnection(config);
      peerConnections[id] = pc;

      // Th√™m track t·ª´ stream local v√†o peer connection
      stream.getTracks().forEach(track => pc.addTrack(track, stream));

      // G·ª≠i ICE candidate ƒë·∫øn viewer
      pc.onicecandidate = event => {
        if (event.candidate) {
          socket.emit('candidate', id, event.candidate);
        }
      };

      // T·∫°o offer v√† g·ª≠i cho viewer
      const offer = await pc.createOffer();
      await pc.setLocalDescription(offer);
      socket.emit('offer', id, pc.localDescription);
    });

    // Nh·∫≠n answer t·ª´ viewer
    socket.on('answer', (id, description) => {
      console.log('üì® Received answer from', id);
      peerConnections[id]?.setRemoteDescription(description);
    });

    // Nh·∫≠n ICE candidate t·ª´ viewer
    socket.on('candidate', (id, candidate) => {
      console.log('üì® Received ICE candidate from', id);
      peerConnections[id]?.addIceCandidate(new RTCIceCandidate(candidate));
    });

    // Khi viewer ng·∫Øt k·∫øt n·ªëi
    socket.on('disconnectPeer', id => {
      console.log('‚ùå Viewer disconnected:', id);
      peerConnections[id]?.close();
      delete peerConnections[id];
    });

  } catch (err) {
    console.error('‚ùå getUserMedia error:', err);
    alert('L·ªói khi truy c·∫≠p camera: ' + err.name + ' ‚Äì ' + err.message);
  }
};