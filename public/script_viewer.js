const socket = io();
const peerConnections = {};
const config = { iceServers: [{ urls: 'stun:stun.l.google.com:19302' }] };

const remoteVideo = document.getElementById('remoteVideo');
const playButton = document.getElementById('playButton');

let receivedStream = null;
let streamReady = false;

// ‚úÖ Ch·ªù khi broadcaster s·∫µn s√†ng th√¨ m·ªõi g·ª≠i 'watcher'
socket.on('broadcaster', () => {
  console.log('üì° Broadcaster is available. Registering as watcher...');
  socket.emit('watcher');
});

// üîÑ Fallback: n·∫øu viewer v√†o tr∆∞·ªõc broadcaster, t·ª± ƒë·ªông th·ª≠ g·ª≠i watcher sau 3 gi√¢y
setTimeout(() => {
  socket.emit('watcher');
  console.log('‚è≥ Retry sending watcher after timeout.');
}, 3000);

// üì® Khi nh·∫≠n ƒë∆∞·ª£c offer t·ª´ broadcaster
socket.on('offer', async (id, description) => {
  console.log('üì® Received offer from broadcaster:', id);

  const pc = new RTCPeerConnection(config);
  peerConnections[id] = pc;

  await pc.setRemoteDescription(description);
  console.log('üßæ Remote description set.');

  const answer = await pc.createAnswer();
  await pc.setLocalDescription(answer);
  console.log('üì§ Sending answer to broadcaster');
  socket.emit('answer', id, pc.localDescription);

  pc.ontrack = event => {
    console.log('üì∫ Received remote track event.');
    const stream = event.streams[0];
    if (stream) {
      receivedStream = stream;
      remoteVideo.srcObject = receivedStream;
      streamReady = true;

      remoteVideo.play().then(() => {
        console.log('‚ñ∂Ô∏è Video is playing automatically.');
      }).catch(err => {
        console.warn('‚ö†Ô∏è Autoplay failed. User interaction may be required.', err);
      });
    } else {
      console.warn('‚ö†Ô∏è No stream received!');
    }
  };

  pc.onicecandidate = event => {
    if (event.candidate) {
      console.log('üì§ Sending ICE candidate to broadcaster');
      socket.emit('candidate', id, event.candidate);
    }
  };
});

// üì® Nh·∫≠n ICE candidate
socket.on('candidate', (id, candidate) => {
  console.log('üì• Received ICE candidate from broadcaster');
  const pc = peerConnections[id];
  if (pc) {
    pc.addIceCandidate(new RTCIceCandidate(candidate));
  }
});

// üßπ Khi peer r·ªõt
socket.on('disconnectPeer', id => {
  console.log(`‚ùå Peer disconnected: ${id}`);
  const pc = peerConnections[id];
  if (pc) {
    pc.close();
    delete peerConnections[id];
  }
});

// ‚ñ∂Ô∏è N√∫t start video
window.addEventListener('DOMContentLoaded', () => {
  if (playButton) {
    playButton.addEventListener('click', () => {
      if (streamReady && receivedStream) {
        remoteVideo.play().then(() => {
          console.log('‚ñ∂Ô∏è Video manually started by user.');
        }).catch(err => {
          console.error('‚ùå Error playing video:', err);
          alert('Kh√¥ng th·ªÉ ph√°t video: ' + err.message);
        });
      } else {
        alert('‚ö†Ô∏è Video ch∆∞a s·∫µn s√†ng! Vui l√≤ng ch·ªù k·∫øt n·ªëi v·ªõi Drone.');
      }
    });
  }
});
